from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    CallbackQuery
)
from aiogram.filters import CommandStart, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import os
import asyncio
from db import async_session, UserData, Analysis, AnalyzesMem
from sqlalchemy import select, delete, func, desc
from datetime import datetime, date, timedelta
import dateparser
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from io import BytesIO
import tempfile
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="üçΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ö–ë–ñ–£")],
        [KeyboardButton(text="üß™ –ê–Ω–∞–ª–∏–∑—ã")],
        [KeyboardButton(text="üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")],
        [KeyboardButton(text="üíä –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π")],
        [KeyboardButton(text="ü©ª –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–º–µ–Ω—é "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
fill_data_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üñä –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–º–µ–Ω—é "–ê–Ω–∞–ª–∏–∑—ã"
analysis_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑")],
        [KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏–∑—ã")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–Ω–∞–ª–∏–∑")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
class DataStates(StatesGroup):
    fio = State()
    goal = State()
    sport = State()
    height = State()    # –ù–æ–≤—ã–π —à–∞–≥: —Ä–æ—Å—Ç
    weight = State()    # –ù–æ–≤—ã–π —à–∞–≥: –≤–µ—Å
    smoking = State()
    alcohol = State()
    chronic = State()
    heredity = State()
    clinical = State()

# /start
@dp.message(CommandStart())
async def start_handler(message: Message):
    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ –≤–∞—à—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–∞—Ä—Ç—É.\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–Ω–∞–ª–∏–∑–∞–º–∏, –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. "
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_keyboard
    )
#----------------------------------------------------------------------------------------------------------------------------------------------------------#
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@dp.message(F.text == "üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def fill_data_handler(message: Message):
    await message.answer(
        "üîí –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:",
        reply_markup=fill_data_keyboard
    )

# –ù–∞—á–∞–ª–æ FSM: –≤–≤–æ–¥ –§–ò–û
@dp.message(F.text == "üñä –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")
async def enter_data_handler(message: Message, state: FSMContext):
    await state.set_state(DataStates.fio)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û ‚Üí –≤—ã–±–æ—Ä —Ü–µ–ª–∏
@dp.message(StateFilter(DataStates.fio))
async def process_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã", callback_data="goal:–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã")],
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",       callback_data="goal:–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã")],
        [InlineKeyboardButton(text="–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞",           callback_data="goal:–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞")],
    ])
    await state.set_state(DataStates.goal)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ ‚Üí —Å–ø–æ—Ä—Ç
@dp.callback_query(StateFilter(DataStates.goal), F.data.startswith("goal:"))
async def process_goal_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    goal = query.data.split(":", 1)[1]
    await state.update_data(goal=goal)
    await state.set_state(DataStates.sport)
    await query.message.edit_reply_markup()
    await query.message.answer("–ó–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –ª–∏ –≤—ã –∫–∞–∫–∏–º-–ª–∏–±–æ —Å–ø–æ—Ä—Ç–æ–º? –ï—Å–ª–∏ –¥–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∏–¥ –∏ —á–∞—Å—Ç–æ—Ç—É –∑–∞–Ω—è—Ç–∏–π:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Ä—Ç–∞ ‚Üí —Ä–æ—Å—Ç
@dp.message(StateFilter(DataStates.sport))
async def process_sport(message: Message, state: FSMContext):
    await state.update_data(sport=message.text)
    await state.set_state(DataStates.height)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞ ‚Üí –≤–µ—Å
@dp.message(StateFilter(DataStates.height))
async def process_height(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    await state.set_state(DataStates.weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞ ‚Üí –∫—É—Ä–µ–Ω–∏–µ
@dp.message(StateFilter(DataStates.weight))
async def process_weight(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞",  callback_data="smoking:–î–∞")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="smoking:–ù–µ—Ç")],
    ])
    await state.set_state(DataStates.smoking)
    await message.answer("–ö—É—Ä–∏—Ç–µ –ª–∏ –≤—ã?", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä–µ–Ω–∏—è ‚Üí –∞–ª–∫–æ–≥–æ–ª—å
@dp.callback_query(StateFilter(DataStates.smoking), F.data.startswith("smoking:"))
async def process_smoking_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    smoking = query.data.split(":", 1)[1]
    await state.update_data(smoking=smoking)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞",  callback_data="alcohol:–î–∞")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="alcohol:–ù–µ—Ç")],
    ])
    await state.set_state(DataStates.alcohol)
    await query.message.edit_reply_markup()
    await query.message.answer("–£–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –ª–∏ –≤—ã –∞–ª–∫–æ–≥–æ–ª—å?", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–∫–æ–≥–æ–ª—è ‚Üí —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏
@dp.callback_query(StateFilter(DataStates.alcohol), F.data.startswith("alcohol:"))
async def process_alcohol_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    alcohol = query.data.split(":", 1)[1]
    await state.update_data(alcohol=alcohol)
    await query.message.edit_reply_markup()
    await state.set_state(DataStates.chronic)
    await query.message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏? –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π ‚Üí –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
@dp.message(StateFilter(DataStates.chronic))
async def process_chronic(message: Message, state: FSMContext):
    await state.update_data(chronic=message.text)
    await state.set_state(DataStates.heredity)
    await message.answer("–ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å (–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ ‚Üí –∫–ª–∏–Ω–∏–∫–∞
@dp.message(StateFilter(DataStates.heredity))
async def process_heredity(message: Message, state: FSMContext):
    await state.update_data(heredity=message.text)
    await state.set_state(DataStates.clinical)
    await message.answer("–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è (—Å–∏–º–ø—Ç–æ–º—ã, –∂–∞–ª–æ–±—ã):")

# –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥
@dp.message(StateFilter(DataStates.clinical))
async def process_clinical(message: Message, state: FSMContext):
    await state.update_data(clinical=message.text)
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å –ø–æ–ª—è height –∏ weight)
    async with async_session() as session:
        async with session.begin():
            user_data = UserData(
                telegram_id=message.from_user.id,
                username=message.from_user.username or message.from_user.full_name,
                full_name=data['fio'],
                goal=data['goal'],
                sport=data['sport'],
                height=data['height'],
                weight=data['weight'],
                smoking=data['smoking'],
                alcohol=data['alcohol'],
                diseases=data['chronic'],
                heredity=data['heredity'],
                symptoms=data['clinical']
            )
            session.add(user_data)
        await session.commit()

    await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=main_keyboard)
    await state.clear()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é  
@dp.message(F.text == "üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
async def view_data_handler(message: Message):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    async with async_session() as session:
        async with session.begin():
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            result = await session.execute(
                select(UserData).where(UserData.telegram_id == message.from_user.id)
            )
            user = result.scalars().first()

    if not user:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø—Ä–∏–≥–ª–∞—à–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏—Ö –≤–≤–µ—Å—Ç–∏
        await message.answer(
            "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
            reply_markup=fill_data_keyboard
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∏–∑ –ø–æ–ª–µ–π –º–æ–¥–µ–ª–∏
    summary = (
        f"<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"üë§ –§–ò–û: {user.full_name}\n"
        f"üéØ –¶–µ–ª—å: {user.goal}\n"
        f"üèÖ –°–ø–æ—Ä—Ç: {user.sport}\n"
        f"üìè –†–æ—Å—Ç: {user.height} —Å–º\n"
        f"‚öñÔ∏è –í–µ—Å: {user.weight} –∫–≥\n"
        f"üö¨ –ö—É—Ä–µ–Ω–∏–µ: {user.smoking}\n"
        f"üç∑ –ê–ª–∫–æ–≥–æ–ª—å: {user.alcohol}\n"
        f"üíâ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏: {user.diseases}\n"
        f"üß¨ –ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å: {user.heredity}\n"
        f"ü©∫ –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è: {user.symptoms}\n"
    )
    await message.answer(summary, reply_markup=fill_data_keyboard)

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
class EditStates(StatesGroup):
    field = State()
    value = State()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
field_display_map = {
    'fio': '–§–ò–û',
    'goal': '–¶–µ–ª—å',
    'sport': '–°–ø–æ—Ä—Ç',
    'height': '–†–æ—Å—Ç',
    'weight': '–í–µ—Å',
    'smoking': '–ö—É—Ä–µ–Ω–∏–µ',
    'alcohol': '–ê–ª–∫–æ–≥–æ–ª—å',
    'chronic': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏',
    'heredity': '–ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
    'clinical': '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è',
}
field_model_attr = {
    'fio': 'full_name',
    'goal': 'goal',
    'sport': 'sport',
    'height': 'height',
    'weight': 'weight',
    'smoking': 'smoking',
    'alcohol': 'alcohol',
    'chronic': 'diseases',
    'heredity': 'heredity',
    'clinical': 'symptoms',
}
field_prompt = {
    'fio': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:",
    'goal': "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:",
    'sport': "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∏–¥ –∏ —á–∞—Å—Ç–æ—Ç—É –∑–∞–Ω—è—Ç–∏–π —Å–ø–æ—Ä—Ç–æ–º:",
    'height': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):",
    'weight': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):",
    'smoking': "–ö—É—Ä–∏—Ç–µ –ª–∏ –≤—ã? (–î–∞/–ù–µ—Ç):",
    'alcohol': "–£–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –ª–∏ –≤—ã –∞–ª–∫–æ–≥–æ–ª—å? (–î–∞/–ù–µ—Ç):",
    'chronic': "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–∞—à–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏:",
    'heredity': "–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å:",
    'clinical': "–û–ø–∏—à–∏—Ç–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è (—Å–∏–º–ø—Ç–æ–º—ã, –∂–∞–ª–æ–±—ã):",
}

# –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è:
@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def edit_data_handler(message: Message, state: FSMContext):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=field_display_map[f], callback_data=f"edit:{f}")]
            for f in field_display_map
        ]
    )
    await state.set_state(EditStates.field)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=kb)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–ª–µ
@dp.callback_query(StateFilter(EditStates.field), F.data.startswith("edit:"))
async def process_edit_field(query: CallbackQuery, state: FSMContext):
    await query.answer()
    field = query.data.split(":", 1)[1]
    await state.update_data(field=field)
    await query.message.edit_reply_markup()  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

    # –ï—Å–ª–∏ —Ü–µ–ª—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    if field == 'goal':
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã", callback_data="edit_goal:–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã")],
            [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",       callback_data="edit_goal:–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã")],
            [InlineKeyboardButton(text="–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞",           callback_data="edit_goal:–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞")],
        ])
        await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:", reply_markup=kb)
        await state.set_state(EditStates.value)
        return

    # –ï—Å–ª–∏ –∫—É—Ä–µ–Ω–∏–µ ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç –î–∞/–ù–µ—Ç
    if field == 'smoking':
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞",  callback_data="edit_smoking:–î–∞")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="edit_smoking:–ù–µ—Ç")],
        ])
        await query.message.answer("–ö—É—Ä–∏—Ç–µ –ª–∏ –≤—ã?", reply_markup=kb)
        await state.set_state(EditStates.value)
        return

    # –ï—Å–ª–∏ –∞–ª–∫–æ–≥–æ–ª—å ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç –î–∞/–ù–µ—Ç
    if field == 'alcohol':
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞",  callback_data="edit_alcohol:–î–∞")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="edit_alcohol:–ù–µ—Ç")],
        ])
        await query.message.answer("–£–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –ª–∏ –≤—ã –∞–ª–∫–æ–≥–æ–ª—å?", reply_markup=kb)
        await state.set_state(EditStates.value)
        return

    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥
    await state.set_state(EditStates.value)
    await query.message.answer(field_prompt[field])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback‚Äë–æ—Ç–≤–µ—Ç–∞ –¥–ª—è goal/smoking/alcohol
@dp.callback_query(StateFilter(EditStates.value), F.data.startswith("edit_goal:"))
@dp.callback_query(StateFilter(EditStates.value), F.data.startswith("edit_smoking:"))
@dp.callback_query(StateFilter(EditStates.value), F.data.startswith("edit_alcohol:"))
async def process_edit_choice_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    prefix, new_value = query.data.split(":", 1)
    data = await state.get_data()
    field = data['field']

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(
                select(UserData).where(UserData.telegram_id == query.from_user.id)
            )
            user = result.scalars().first()
            if user:
                setattr(user, field_model_attr[field], new_value)
                session.add(user)
        await session.commit()

    await query.message.edit_reply_markup()
    await query.message.answer(
        f"‚úÖ –ü–æ–ª–µ ¬´{field_display_map[field]}¬ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ¬´{new_value}¬ª!",
        reply_markup=fill_data_keyboard
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
@dp.message(StateFilter(EditStates.value))
async def process_edit_text_value(message: Message, state: FSMContext):
    data = await state.get_data()
    field = data['field']
    new_value = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(
                select(UserData).where(UserData.telegram_id == message.from_user.id)
            )
            user = result.scalars().first()
            if user:
                setattr(user, field_model_attr[field], new_value)
                session.add(user)
        await session.commit()

    await message.answer(
        f"‚úÖ –ü–æ–ª–µ ¬´{field_display_map[field]}¬ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=fill_data_keyboard
    )
    await state.clear()


# –î–æ–±–∞–≤–∏–º FSM‚Äë—Å—Ç–µ–π—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
class DeleteStates(StatesGroup):
    confirm = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def delete_data_handler(message: Message, state: FSMContext):
    # –°—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(DeleteStates.confirm)

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞—ë–º ReplyKeyboardMarkup –∏ KeyboardButton —Å –∫–ª—é—á–µ–≤—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:
    confirm_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ?\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ ¬´–î–∞¬ª, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ.",
        reply_markup=confirm_kb
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
@dp.message(StateFilter(DeleteStates.confirm))
async def process_delete_confirmation(message: Message, state: FSMContext):
    text = message.text.strip().lower()

    if text == "–¥–∞":
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session() as session:
            async with session.begin():
                await session.execute(
                    delete(UserData)
                    .where(UserData.telegram_id == message.from_user.id)
                )
            await session.commit()

        await message.answer("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", reply_markup=main_keyboard)

    else:
        await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=fill_data_keyboard)

    await state.clear()


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    await message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=main_keyboard)
#----------------------------------------------------------------------------------------------------------------------------------------------------------#
@dp.message(F.text == "üçΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ö–ë–ñ–£")
async def kbju_recommendation(message: Message):
    # –¥–æ—Å—Ç–∞—ë–º –∏–∑ –ë–î –≤–µ—Å –∏ —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(
                select(UserData).where(UserData.telegram_id == message.from_user.id)
            )
            user = result.scalars().first()

    if not user:
        await message.answer(
            "‚ùóÔ∏è –î–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=main_keyboard
        )
        return

    try:
        weight = float(user.weight)
    except (TypeError, ValueError):
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Å–∞ –≤ –±–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Üí –í–µ—Å.",
            reply_markup=main_keyboard
        )
        return

    goal = user.goal

    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    if goal == "–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã":
        proteins = weight * 1.5
        fats     = weight - 10
        carbs    = weight * 4
        carbs2   = weight * 3
        calories = proteins * 4 + fats * 9 + carbs * 4
        calories2 = proteins * 4 + fats * 9 + carbs2 * 4
        expected_change = (calories - calories2) * 30 / 7.9
        change_text = f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –≤ –º–µ—Å—è—Ü: {int(expected_change)} –≥"
    elif goal == "–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞":
        proteins = weight * 1.5
        fats     = weight - 10
        carbs    = weight * 1.5
        carbs2   = weight * 3
        calories = proteins * 4 + fats * 9 + carbs * 4
        calories2 = proteins * 4 + fats * 9 + carbs2 * 4
        expected_change = abs(calories - calories2) * 30 / 7.9
        change_text = f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –ø–æ—Ç–µ—Ä—è –≤ –º–µ—Å—è—Ü: {int(expected_change)} –≥"
    else:  # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã
        proteins = weight * 1.5
        fats     = weight - 10
        carbs    = weight * 3
        calories = proteins * 4 + fats * 9 + carbs * 4
        change_text = "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–∞—Å—Å–µ –Ω–µ—Ç"

    # –°–æ–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ö–ë–ñ–£</b>\n\n"
        f"üìè –í–∞—à –≤–µ—Å: {weight:.1f} –∫–≥\n"
        f"üéØ –¶–µ–ª—å: {goal}\n\n"
        f"ü•© –ë–µ–ª–∫–∏: {int(proteins)} –≥\n"
        f"üßà –ñ–∏—Ä—ã: {int(fats)} –≥\n"
        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {int(carbs)} –≥\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {int(calories)} –∫–∫–∞–ª\n\n"
        f"üîÑ {change_text}"
    )
    await message.answer(text, reply_markup=main_keyboard)

class AddAnalysis(StatesGroup):
    date = State()
    select_group = State()
    select_analysis = State()
    select_variant = State()
    result = State()
#----------------------------------------------------------------------------------------------------------------------------------------------------------#
@dp.message(F.text == "üß™ –ê–Ω–∞–ª–∏–∑—ã")
async def analyses_menu_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏:", reply_markup=analysis_keyboard)



@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
async def start_add_analysis(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ (–¥–¥.–º–º.–≥–≥–≥–≥, '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞'):"
    )
    await state.set_state(AddAnalysis.date)


@dp.message(AddAnalysis.date)
async def process_date(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    try:
        if text in ['—Å–µ–≥–æ–¥–Ω—è', 'today']:
            parsed_date = date.today()
        elif text in ['–≤—á–µ—Ä–∞', 'yesterday']:
            parsed_date = date.today() - timedelta(days=1)
        else:
            dt = dateparser.parse(text, languages=['ru', 'en'])
            if not dt:
                raise ValueError
            parsed_date = dt.date()

        await state.update_data(date=parsed_date)

        async with async_session() as session:
            q = select(AnalyzesMem.group_name).distinct()
            res = await session.execute(q)
            groups = [r[0] for r in res.all()]

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=g, callback_data=f"group|{g}")] for g in groups
            ] + [[InlineKeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥", callback_data="finish")]]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=kb)
        await state.set_state(AddAnalysis.select_group)
    except Exception:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥, '—Å–µ–≥–æ–¥–Ω—è' –∏–ª–∏ '–≤—á–µ—Ä–∞'."
        )


@dp.callback_query(F.data.startswith('group|'), AddAnalysis.select_group)
async def choose_group(callback: CallbackQuery, state: FSMContext):
    group = callback.data.split("|", 1)[1]
    await state.update_data(group=group)

    async with async_session() as session:
        q = select(AnalyzesMem.name).where(AnalyzesMem.group_name == group).distinct()
        res = await session.execute(q)
        names = [r[0] for r in res.all()]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=n, callback_data=f"analysis|{n}")] for n in names
        ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="back_to_groups")]]
    )
    await callback.message.answer(f"–ì—Ä—É–ø–ø–∞: {group}. –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:", reply_markup=kb)
    await state.set_state(AddAnalysis.select_analysis)
    await callback.answer()


@dp.callback_query(F.data == 'back_to_groups', AddAnalysis.select_analysis)
async def back_to_groups(callback: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        q = select(AnalyzesMem.group_name).distinct()
        res = await session.execute(q)
        groups = [r[0] for r in res.all()]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=g, callback_data=f"group|{g}")] for g in groups
        ] + [[InlineKeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥", callback_data="finish")]]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=kb)
    await state.set_state(AddAnalysis.select_group)
    await callback.answer()


@dp.callback_query(F.data.startswith('analysis|'), AddAnalysis.select_analysis)
async def choose_analysis(callback: CallbackQuery, state: FSMContext):
    name = callback.data.split("|", 1)[1]
    data = await state.get_data()
    group = data.get("group")

    async with async_session() as session:
        q = select(AnalyzesMem).where(
            AnalyzesMem.group_name == group,
            AnalyzesMem.name == name
        )
        res = await session.execute(q)
        variants = res.scalars().all()

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{v.unit} ({v.reference_values})", callback_data=f"variant|{v.id}")] for v in variants
        ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑–∞–º", callback_data="back_to_analyses")]]
    )
    await callback.message.answer(f"–ê–Ω–∞–ª–∏–∑: {name}. –í—ã–±–µ—Ä–∏—Ç–µ –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(AddAnalysis.select_variant)
    await callback.answer()


@dp.callback_query(F.data == 'back_to_analyses', AddAnalysis.select_variant)
async def back_to_analyses(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    group = data.get("group")

    async with async_session() as session:
        q = select(AnalyzesMem.name).where(AnalyzesMem.group_name == group).distinct()
        res = await session.execute(q)
        names = [r[0] for r in res.all()]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=n, callback_data=f"analysis|{n}")] for n in names
        ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="back_to_groups")]]
    )
    await callback.message.answer(f"–ì—Ä—É–ø–ø–∞: {group}. –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:", reply_markup=kb)
    await state.set_state(AddAnalysis.select_analysis)
    await callback.answer()


@dp.callback_query(F.data.startswith('variant|'), AddAnalysis.select_variant)
async def choose_variant(callback: CallbackQuery, state: FSMContext):
    mem_id = int(callback.data.split("|", 1)[1])
    async with async_session() as session:
        mem = await session.get(AnalyzesMem, mem_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await state.update_data(
        mem_id=mem_id,
        name=mem.name,
        # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É
        conversion_to_standard=mem.conversion_to_standard,
        # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏ –µ—ë —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        standard_unit=mem.standard_unit,
        standard_reference=mem.standard_reference
    )

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {mem.name} ‚Äî {mem.unit} ({mem.reference_values}).\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞(–Ω–∞–ø—Ä–∏–º–µ—Ä 5.6):"
    )
    await state.set_state(AddAnalysis.result)
    await callback.answer()


@dp.message(AddAnalysis.result)
async def process_result(message: Message, state: FSMContext):
    data = await state.get_data()
    raw_val = float(message.text.strip())

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
    standardized_val = raw_val * data['conversion_to_standard']

    async with async_session() as session:
        async with session.begin():
            new = Analysis(
                telegram_id=message.from_user.id,
                name=data['name'],
                group_name=data['group'],
                # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å
                units=data['standard_unit'],
                reference=data['standard_reference'],
                result=str(standardized_val),
                date=data['date']
            )
            session.add(new)

    # –î–∞–ª—å—à–µ –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
    async with async_session() as session:
        q = select(AnalyzesMem.group_name).distinct()
        res = await session.execute(q)
        groups = [r[0] for r in res.all()]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=g, callback_data=f"group|{g}")]
            for g in groups
        ] + [[InlineKeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥", callback_data="finish")]]
    )
    await message.answer(
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {data['name']} = {standardized_val} {data['standard_unit']}. "
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç–µ:",
        reply_markup=kb
    )
    await state.set_state(AddAnalysis.select_group)

@dp.message(AddAnalysis.result)
async def process_result(message: Message, state: FSMContext):
    data = await state.get_data()
    result_val = message.text.strip()

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
    result_val = float(result_val) * data['conversion_factor']

    parsed_date = data['date']
    group = data['group']

    async with async_session() as session:
        async with session.begin():
            new = Analysis(
                telegram_id=message.from_user.id,
                name=data['name'],
                group_name=group,
                reference=data['reference_values'],
                units=data['unit'],
                result=result_val,
                date=parsed_date
            )
            session.add(new)

    async with async_session() as session:
        q = select(AnalyzesMem.group_name).distinct()
        res = await session.execute(q)
        groups = [r[0] for r in res.all()]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=g, callback_data=f"group|{g}")] for g in groups
        ] + [[InlineKeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥", callback_data="finish")]]
    )
    await message.answer(
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {data['name']} = {result_val}. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç–µ:",
        reply_markup=kb
    )
    await state.set_state(AddAnalysis.select_group)


@dp.callback_query(F.data == "finish", AddAnalysis.select_group)
async def finish_adding(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=analysis_keyboard)
    await state.clear()
    await callback.answer()



# --------------- –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏–∑–æ–≤ -----------------

pdfmetrics.registerFont(
    TTFont('ArialUnicode', r'C:\Windows\Fonts\arial.ttf')
)

@dp.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏–∑—ã")
async def show_analysis_menu(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—Å–µ –∞–Ω–∞–ª–∏–∑—ã", callback_data="view_option|all")],
        [InlineKeyboardButton(text="–ü–æ –¥–∞—Ç–µ —Å–¥–∞—á–∏", callback_data="view_option|date")],
        [InlineKeyboardButton(text="–î–∏–Ω–∞–º–∏–∫–∞", callback_data="view_option|trend")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_view")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤:", reply_markup=kb)

# 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
@dp.callback_query(F.data.startswith("view_option|"))
async def handle_view_option(callback: CallbackQuery):
    option = callback.data.split("|", 1)[1]
    # –û–ø—Ü–∏—è "–í—Å–µ –∞–Ω–∞–ª–∏–∑—ã"
    if option == "all":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ–º", callback_data="all_msg")],
            [InlineKeyboardButton(text="PDF", callback_data="all_pdf")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_menu")]
        ])
        await callback.message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã?", reply_markup=kb)

    # –û–ø—Ü–∏—è "–ü–æ –¥–∞—Ç–µ —Å–¥–∞—á–∏"
    elif option == "date":
        async with async_session() as session:
            q = select(Analysis.date).where(
                Analysis.telegram_id == callback.from_user.id
            ).distinct().order_by(desc(Analysis.date))
            res = await session.execute(q)
            dates = [r[0] for r in res.all()]
        if not dates:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
        else:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=d.strftime("%d.%m.%Y"), callback_data=f"view_date|{d.isoformat()}")]
                    for d in dates
                ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_menu")]]
            )
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏:", reply_markup=kb)

    # –û–ø—Ü–∏—è "–î–∏–Ω–∞–º–∏–∫–∞"
    elif option == "trend":
        # –í—ã–≤–æ–¥–∏–º –≥—Ä—É–ø–ø—ã –∞–Ω–∞–ª–∏–∑–æ–≤, –∫–∞–∫ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        async with async_session() as session:
            q = select(Analysis.group_name).where(
                Analysis.telegram_id == callback.from_user.id
            ).distinct()
            res = await session.execute(q)
            groups = [r[0] for r in res.all()]
        if not groups:
            await callback.message.answer("üìã –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
        else:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=g, callback_data=f"view_group|{g}")]
                    for g in groups
                ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_view")]]
            )
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=kb
            )
    await callback.answer()

# 3. –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
@dp.callback_query(F.data == "all_msg")
async def all_msg(callback: CallbackQuery):
    async with async_session() as session:
        subq = select(
            Analysis.name,
            func.max(Analysis.date).label("max_date")
        ).where(
            Analysis.telegram_id == callback.from_user.id
        ).group_by(Analysis.name).subquery()
        q = select(
            Analysis.name,
            Analysis.result,
            Analysis.reference,
            Analysis.date
        ).join(
            subq,
            (Analysis.name == subq.c.name) & (Analysis.date == subq.c.max_date)
        )
        res = await session.execute(q)
        rows = res.all()

    if not rows:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
        await callback.answer()
        return

    text = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º –∞–Ω–∞–ª–∏–∑–∞–º:</b>\n"
    for name, result, reference, date in rows:
        # –ø—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª—É (—É—á—ë—Ç 4,5 –∏ 4.5)
        res_num = None
        if result:
            try:
                res_num = float(result.replace(',', '.'))
            except ValueError:
                pass

        # –ø–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω reference
        min_ref = max_ref = None
        if reference:
            parts = re.split(r'[^0-9\.]+', reference)
            nums = [p.replace(',', '.') for p in parts if p]
            if len(nums) >= 2:
                try:
                    min_ref, max_ref = float(nums[0]), float(nums[1])
                except ValueError:
                    pass

        # –≤—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        if res_num is not None and min_ref is not None and max_ref is not None:
            emoji = 'üü¢' if min_ref <= res_num <= max_ref else 'üî¥'
        else:
            emoji = ''

        text += f"{emoji}{name} = {result} ({date.strftime('%d.%m.%Y')})\n"

    await callback.message.answer(text)
    await callback.answer()

# 4. –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ PDF (–¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
@dp.callback_query(F.data == "all_pdf")
async def all_pdf(callback: CallbackQuery):
    async with async_session() as session:
        q = (
            select(Analysis)
            .where(Analysis.telegram_id == callback.from_user.id)
            .order_by(Analysis.name, desc(Analysis.date))
        )
        res = await session.execute(q)
        analyses = res.scalars().all()

    grouped = {}
    for a in analyses:
        grouped.setdefault(a.name, []).append(a)

    table_data = [[
        '–ê–Ω–∞–ª–∏–∑', '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–∞—Ç–∞)',
        '–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–∞—Ç–∞)', '–†–µ—Ñ–µ—Ä–µ–Ω—Å', '–ï–¥. –∏–∑–º.'
    ]]
    for name, items in grouped.items():
        last = items[0]
        prev = items[1] if len(items) > 1 else None
        table_data.append([
            name,
            f"{last.result} ({last.date.strftime('%d.%m.%Y')})",
            f"{prev.result} ({prev.date.strftime('%d.%m.%Y')})" if prev else '‚Äî',
            last.reference or '‚Äî',
            last.units or '‚Äî'
        ])

    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    table = Table(table_data)
    table.setStyle(TableStyle([
        ('FONTNAME',    (0,0), (-1,-1), 'ArialUnicode'),
        ('GRID', (0,0), (-1,-1), 0.5, colors.black),
        ('BACKGROUND', (0,0), (-1,0), colors.lightgrey)
    ]))
    doc.build([table])
    buffer.seek(0)

    # 1) –ø–∏—à–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tf:
        tf.write(buffer.read())
        temp_path = tf.name

    # 2) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ FSInputFile
    file = FSInputFile(temp_path, filename='all_analyses.pdf')
    await callback.message.answer_document(file)
    await callback.answer()

    # 3) —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(temp_path)

# 5. –í—ã–≤–æ–¥ –ø–æ –¥–∞—Ç–µ
@dp.callback_query(F.data.startswith("view_date|"))
async def view_date(callback: CallbackQuery):
    iso = callback.data.split("|", 1)[1]
    date = datetime.fromisoformat(iso).date()
    async with async_session() as session:
        q = select(Analysis.name, Analysis.result, Analysis.reference).where(
            Analysis.telegram_id == callback.from_user.id,
            Analysis.date == date
        )
        res = await session.execute(q)
        rows = res.all()

    if not rows:
        await callback.message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
    else:
        text = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ {date.strftime('%d.%m.%Y')}:</b>\n"
        for name, result, reference in rows:
            # –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ —á–∏—Å–ª—É (—É—á—ë—Ç 4,5 –∏ 4.5)
            res_num = None
            if result:
                try:
                    res_num = float(result.replace(',', '.'))
                except ValueError:
                    pass

            # –ø–∞—Ä—Å–∏–º –≥—Ä–∞–Ω–∏—Ü—ã —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            min_ref = max_ref = None
            if reference:
                parts = re.split(r'[^0-9,\.]+', reference)
                nums = [p.replace(',', '.') for p in parts if p]
                if len(nums) >= 2:
                    try:
                        min_ref, max_ref = float(nums[0]), float(nums[1])
                    except ValueError:
                        pass

            # –≤—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
            if res_num is not None and min_ref is not None and max_ref is not None:
                emoji = 'üü¢' if min_ref <= res_num <= max_ref else 'üî¥'
            else:
                emoji = ''

            text += f"{name} = {emoji}{result} ({reference})\n"
        await callback.message.answer(text)
        await callback.answer()

# 6. –ì—Ä—É–ø–ø—ã –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–¥–∏–Ω–∞–º–∏–∫–∞) ‚Äî —Ç–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
@dp.callback_query(F.data.startswith("view_group|"))
async def view_group(callback: CallbackQuery):
    group = callback.data.split("|", 1)[1]
    async with async_session() as session:
        q = select(Analysis.name).where(
            Analysis.telegram_id == callback.from_user.id,
            Analysis.group_name == group
        ).distinct()
        res = await session.execute(q)
        names = [r[0] for r in res.all()]

    if not names:
        await callback.message.answer(
            "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=None
        )
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=n, callback_data=f"view_analysis|{n}")]
                for n in names
            ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_view")]]
        )
        await callback.message.answer(
            f"–ì—Ä—É–ø–ø–∞: {group}. –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:",
            reply_markup=kb
        )
    await callback.answer()

@dp.callback_query(F.data.startswith("view_analysis|"))
async def view_analysis(callback: CallbackQuery):
    name = callback.data.split("|", 1)[1]
    async with async_session() as session:
        q = select(Analysis).where(
            Analysis.telegram_id == callback.from_user.id,
            Analysis.name == name
        ).order_by(desc(Analysis.date))
        res = await session.execute(q)
        analyses = res.scalars().all()

    if not analyses:
        await callback.message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        )
    else:
        text = f"<b>–ê–Ω–∞–ª–∏–∑—ã {name}:</b>\n\n"
        for a in analyses:
            dt = a.date.strftime("%d.%m.%Y") if a.date else '‚Äî'
            res_num = None
            if a.result:
                try:
                    res_num = float(a.result.replace(',', '.'))
                except ValueError:
                    pass

            # –ø–∞—Ä—Å–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –Ω–æ—Ä–º—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ reference, –Ω–∞–ø—Ä–∏–º–µ—Ä "60-80"
            min_ref = max_ref = None
            if a.reference:
                parts = re.split(r'[^0-9,\.]+', a.reference)
                nums = [p.replace(',', '.') for p in parts if p]
                if len(nums) >= 2:
                    try:
                        min_ref, max_ref = float(nums[0]), float(nums[1])
                    except ValueError:
                        pass

            # –≤—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏: üü¢ –µ—Å–ª–∏ –≤ –Ω–æ—Ä–º–µ, üî¥ –µ—Å–ª–∏ –≤–Ω–µ
            if res_num is not None and min_ref is not None and max_ref is not None:
                emoji = 'üü¢' if min_ref <= res_num <= max_ref else 'üî¥'
            else:
                emoji = ''

            text += (
                f"üìÖ {dt}: {emoji}{a.result or '‚Äî'} {a.units or ''} "
                f"(–†–µ—Ñ–µ—Ä–µ–Ω—Å: {a.reference or '‚Äî'})\n"
            )
        await callback.message.answer(text)
    await callback.answer()

# 7. –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
@dp.callback_query(F.data == "cancel_view" or F.data == "show_menu")
async def cancel_view(callback: CallbackQuery):
    await callback.message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏–∑–æ–≤ –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback.answer()
    
# --------------- –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–æ–≤ -----------------
class DeleteAnalysis(StatesGroup):
    name = State()
    choosing = State()

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
async def start_delete_analysis(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(DeleteAnalysis.name)

@dp.message(DeleteAnalysis.name)
async def delete_analysis_by_name(message: Message, state: FSMContext):
    analysis_name = message.text.strip()

    async with async_session() as session:
        async with session.begin():
            result = await session.execute(
                select(Analysis)
                .where(
                    func.lower(Analysis.name) == analysis_name.lower(),
                    Analysis.telegram_id == message.from_user.id
                )
            )
            analyses = result.scalars().all()

    if not analyses:
        await message.answer("‚ùå –ê–Ω–∞–ª–∏–∑ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –ï—Å–ª–∏ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω ‚Äî —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É
    if len(analyses) == 1:
        async with async_session() as session:
            async with session.begin():
                await session.delete(analyses[0])
        await message.answer(f"‚úÖ –ê–Ω–∞–ª–∏–∑ ¬´{analyses[0].name}¬ª —É–¥–∞–ª—ë–Ω.")
        await state.clear()
        return

    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî —Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    for analysis in analyses:
        btn_text = f"{analysis.name} ‚Äî {analysis.date.strftime('%Y-%m-%d')}"
        builder.button(
            text=btn_text,
            callback_data=f"del_analysis:{analysis.id}"
        )
    builder.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É

    await message.answer(
        "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —É–¥–∞–ª–∏—Ç—å:", 
        reply_markup=builder.as_markup()
    )
    await state.set_state(DeleteAnalysis.choosing)

@dp.callback_query(DeleteAnalysis.choosing, lambda cb: cb.data.startswith("del_analysis:"))
async def process_delete_analysis_cb(callback_query: CallbackQuery, state: FSMContext):
    # cb.data = "del_analysis:<id>"
    analysis_id = int(callback_query.data.split(":", 1)[1])

    async with async_session() as session:
        async with session.begin():
            result = await session.execute(
                select(Analysis).where(Analysis.id == analysis_id)
            )
            analysis = result.scalar_one_or_none()
            if analysis:
                await session.delete(analysis)

    await callback_query.message.edit_text(
        f"‚úÖ –ê–Ω–∞–ª–∏–∑ ¬´{analysis.name}¬ª –æ—Ç {analysis.date.strftime('%Y-%m-%d')} —É–¥–∞–ª—ë–Ω."
    )
    await state.clear()

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
