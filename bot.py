from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import os
import asyncio
from db import async_session, UserData  # –≤–∞—à–∞ –º–æ–¥–µ–ª—å
from sqlalchemy import select, delete, text

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")],
        [KeyboardButton(text="üçΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ö–ë–ñ–£")],
        [KeyboardButton(text="üß™ –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑")],
        [KeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")],
        [KeyboardButton(text="üíä –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π")],
        [KeyboardButton(text="ü©ª –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–º–µ–Ω—é "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
fill_data_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üñä –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
class DataStates(StatesGroup):
    fio = State()
    goal = State()
    sport = State()
    height = State()    # –ù–æ–≤—ã–π —à–∞–≥: —Ä–æ—Å—Ç
    weight = State()    # –ù–æ–≤—ã–π —à–∞–≥: –≤–µ—Å
    smoking = State()
    alcohol = State()
    chronic = State()
    heredity = State()
    clinical = State()

# /start
@dp.message(CommandStart())
async def start_handler(message: Message):
    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ –≤–∞—à—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–∞—Ä—Ç—É.\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–Ω–∞–ª–∏–∑–∞–º–∏, –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. "
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_keyboard
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
@dp.message(F.text == "üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
async def fill_data_handler(message: Message):
    await message.answer(
        "üîí –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:",
        reply_markup=fill_data_keyboard
    )

# –ù–∞—á–∞–ª–æ FSM: –≤–≤–æ–¥ –§–ò–û
@dp.message(F.text == "üñä –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")
async def enter_data_handler(message: Message, state: FSMContext):
    await state.set_state(DataStates.fio)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û ‚Üí –≤—ã–±–æ—Ä —Ü–µ–ª–∏
@dp.message(StateFilter(DataStates.fio))
async def process_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã", callback_data="goal:–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã")],
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",       callback_data="goal:–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã")],
        [InlineKeyboardButton(text="–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞",           callback_data="goal:–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞")],
    ])
    await state.set_state(DataStates.goal)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ ‚Üí —Å–ø–æ—Ä—Ç
@dp.callback_query(StateFilter(DataStates.goal), F.data.startswith("goal:"))
async def process_goal_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    goal = query.data.split(":", 1)[1]
    await state.update_data(goal=goal)
    await state.set_state(DataStates.sport)
    await query.message.edit_reply_markup()
    await query.message.answer("–ó–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –ª–∏ –≤—ã –∫–∞–∫–∏–º-–ª–∏–±–æ —Å–ø–æ—Ä—Ç–æ–º? –ï—Å–ª–∏ –¥–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∏–¥ –∏ —á–∞—Å—Ç–æ—Ç—É –∑–∞–Ω—è—Ç–∏–π:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Ä—Ç–∞ ‚Üí —Ä–æ—Å—Ç
@dp.message(StateFilter(DataStates.sport))
async def process_sport(message: Message, state: FSMContext):
    await state.update_data(sport=message.text)
    await state.set_state(DataStates.height)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞ ‚Üí –≤–µ—Å
@dp.message(StateFilter(DataStates.height))
async def process_height(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    await state.set_state(DataStates.weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞ ‚Üí –∫—É—Ä–µ–Ω–∏–µ
@dp.message(StateFilter(DataStates.weight))
async def process_weight(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞",  callback_data="smoking:–î–∞")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="smoking:–ù–µ—Ç")],
    ])
    await state.set_state(DataStates.smoking)
    await message.answer("–ö—É—Ä–∏—Ç–µ –ª–∏ –≤—ã?", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä–µ–Ω–∏—è ‚Üí –∞–ª–∫–æ–≥–æ–ª—å
@dp.callback_query(StateFilter(DataStates.smoking), F.data.startswith("smoking:"))
async def process_smoking_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    smoking = query.data.split(":", 1)[1]
    await state.update_data(smoking=smoking)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞",  callback_data="alcohol:–î–∞")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="alcohol:–ù–µ—Ç")],
    ])
    await state.set_state(DataStates.alcohol)
    await query.message.edit_reply_markup()
    await query.message.answer("–£–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –ª–∏ –≤—ã –∞–ª–∫–æ–≥–æ–ª—å?", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–∫–æ–≥–æ–ª—è ‚Üí —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏
@dp.callback_query(StateFilter(DataStates.alcohol), F.data.startswith("alcohol:"))
async def process_alcohol_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    alcohol = query.data.split(":", 1)[1]
    await state.update_data(alcohol=alcohol)
    await query.message.edit_reply_markup()
    await state.set_state(DataStates.chronic)
    await query.message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏? –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π ‚Üí –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
@dp.message(StateFilter(DataStates.chronic))
async def process_chronic(message: Message, state: FSMContext):
    await state.update_data(chronic=message.text)
    await state.set_state(DataStates.heredity)
    await message.answer("–ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å (–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ ‚Üí –∫–ª–∏–Ω–∏–∫–∞
@dp.message(StateFilter(DataStates.heredity))
async def process_heredity(message: Message, state: FSMContext):
    await state.update_data(heredity=message.text)
    await state.set_state(DataStates.clinical)
    await message.answer("–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è (—Å–∏–º–ø—Ç–æ–º—ã, –∂–∞–ª–æ–±—ã):")

# –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥
@dp.message(StateFilter(DataStates.clinical))
async def process_clinical(message: Message, state: FSMContext):
    await state.update_data(clinical=message.text)
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å –ø–æ–ª—è height –∏ weight)
    async with async_session() as session:
        async with session.begin():
            user_data = UserData(
                telegram_id=message.from_user.id,
                username=message.from_user.username or message.from_user.full_name,
                full_name=data['fio'],
                goal=data['goal'],
                sport=data['sport'],
                height=data['height'],
                weight=data['weight'],
                smoking=data['smoking'],
                alcohol=data['alcohol'],
                diseases=data['chronic'],
                heredity=data['heredity'],
                symptoms=data['clinical']
            )
            session.add(user_data)
        await session.commit()

    await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=main_keyboard)
    await state.clear()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é  
@dp.message(F.text == "üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
async def view_data_handler(message: Message):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    async with async_session() as session:
        async with session.begin():
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            result = await session.execute(
                select(UserData).where(UserData.telegram_id == message.from_user.id)
            )
            user = result.scalars().first()

    if not user:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø—Ä–∏–≥–ª–∞—à–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏—Ö –≤–≤–µ—Å—Ç–∏
        await message.answer(
            "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
            reply_markup=fill_data_keyboard
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∏–∑ –ø–æ–ª–µ–π –º–æ–¥–µ–ª–∏
    summary = (
        f"<b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"üë§ –§–ò–û: {user.full_name}\n"
        f"üéØ –¶–µ–ª—å: {user.goal}\n"
        f"üèÖ –°–ø–æ—Ä—Ç: {user.sport}\n"
        f"üìè –†–æ—Å—Ç: {user.height} —Å–º\n"
        f"‚öñÔ∏è –í–µ—Å: {user.weight} –∫–≥\n"
        f"üö¨ –ö—É—Ä–µ–Ω–∏–µ: {user.smoking}\n"
        f"üç∑ –ê–ª–∫–æ–≥–æ–ª—å: {user.alcohol}\n"
        f"üíâ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏: {user.diseases}\n"
        f"üß¨ –ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å: {user.heredity}\n"
        f"ü©∫ –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è: {user.symptoms}\n"
    )
    await message.answer(summary, reply_markup=fill_data_keyboard)

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
class EditStates(StatesGroup):
    field = State()
    value = State()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
field_display_map = {
    'fio': '–§–ò–û',
    'goal': '–¶–µ–ª—å',
    'sport': '–°–ø–æ—Ä—Ç',
    'height': '–†–æ—Å—Ç',
    'weight': '–í–µ—Å',
    'smoking': '–ö—É—Ä–µ–Ω–∏–µ',
    'alcohol': '–ê–ª–∫–æ–≥–æ–ª—å',
    'chronic': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏',
    'heredity': '–ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
    'clinical': '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è',
}
field_model_attr = {
    'fio': 'full_name',
    'goal': 'goal',
    'sport': 'sport',
    'height': 'height',
    'weight': 'weight',
    'smoking': 'smoking',
    'alcohol': 'alcohol',
    'chronic': 'diseases',
    'heredity': 'heredity',
    'clinical': 'symptoms',
}
field_prompt = {
    'fio': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:",
    'goal': "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:",
    'sport': "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∏–¥ –∏ —á–∞—Å—Ç–æ—Ç—É –∑–∞–Ω—è—Ç–∏–π —Å–ø–æ—Ä—Ç–æ–º:",
    'height': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):",
    'weight': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):",
    'smoking': "–ö—É—Ä–∏—Ç–µ –ª–∏ –≤—ã? (–î–∞/–ù–µ—Ç):",
    'alcohol': "–£–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –ª–∏ –≤—ã –∞–ª–∫–æ–≥–æ–ª—å? (–î–∞/–ù–µ—Ç):",
    'chronic': "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–∞—à–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏:",
    'heredity': "–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å:",
    'clinical': "–û–ø–∏—à–∏—Ç–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è (—Å–∏–º–ø—Ç–æ–º—ã, –∂–∞–ª–æ–±—ã):",
}

# –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è:
@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def edit_data_handler(message: Message, state: FSMContext):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=field_display_map[f], callback_data=f"edit:{f}")]
            for f in field_display_map
        ]
    )
    await state.set_state(EditStates.field)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=kb)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–ª–µ
@dp.callback_query(StateFilter(EditStates.field), F.data.startswith("edit:"))
async def process_edit_field(query: CallbackQuery, state: FSMContext):
    await query.answer()
    field = query.data.split(":", 1)[1]
    await state.update_data(field=field)
    await query.message.edit_reply_markup()  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

    # –ï—Å–ª–∏ —Ü–µ–ª—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    if field == 'goal':
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã", callback_data="edit_goal:–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã")],
            [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",       callback_data="edit_goal:–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã")],
            [InlineKeyboardButton(text="–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞",           callback_data="edit_goal:–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞")],
        ])
        await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:", reply_markup=kb)
        await state.set_state(EditStates.value)
        return

    # –ï—Å–ª–∏ –∫—É—Ä–µ–Ω–∏–µ ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç –î–∞/–ù–µ—Ç
    if field == 'smoking':
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞",  callback_data="edit_smoking:–î–∞")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="edit_smoking:–ù–µ—Ç")],
        ])
        await query.message.answer("–ö—É—Ä–∏—Ç–µ –ª–∏ –≤—ã?", reply_markup=kb)
        await state.set_state(EditStates.value)
        return

    # –ï—Å–ª–∏ –∞–ª–∫–æ–≥–æ–ª—å ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç –î–∞/–ù–µ—Ç
    if field == 'alcohol':
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞",  callback_data="edit_alcohol:–î–∞")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="edit_alcohol:–ù–µ—Ç")],
        ])
        await query.message.answer("–£–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –ª–∏ –≤—ã –∞–ª–∫–æ–≥–æ–ª—å?", reply_markup=kb)
        await state.set_state(EditStates.value)
        return

    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥
    await state.set_state(EditStates.value)
    await query.message.answer(field_prompt[field])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback‚Äë–æ—Ç–≤–µ—Ç–∞ –¥–ª—è goal/smoking/alcohol
@dp.callback_query(StateFilter(EditStates.value), F.data.startswith("edit_goal:"))
@dp.callback_query(StateFilter(EditStates.value), F.data.startswith("edit_smoking:"))
@dp.callback_query(StateFilter(EditStates.value), F.data.startswith("edit_alcohol:"))
async def process_edit_choice_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    prefix, new_value = query.data.split(":", 1)
    data = await state.get_data()
    field = data['field']

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(
                select(UserData).where(UserData.telegram_id == query.from_user.id)
            )
            user = result.scalars().first()
            if user:
                setattr(user, field_model_attr[field], new_value)
                session.add(user)
        await session.commit()

    await query.message.edit_reply_markup()
    await query.message.answer(
        f"‚úÖ –ü–æ–ª–µ ¬´{field_display_map[field]}¬ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ¬´{new_value}¬ª!",
        reply_markup=fill_data_keyboard
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
@dp.message(StateFilter(EditStates.value))
async def process_edit_text_value(message: Message, state: FSMContext):
    data = await state.get_data()
    field = data['field']
    new_value = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(
                select(UserData).where(UserData.telegram_id == message.from_user.id)
            )
            user = result.scalars().first()
            if user:
                setattr(user, field_model_attr[field], new_value)
                session.add(user)
        await session.commit()

    await message.answer(
        f"‚úÖ –ü–æ–ª–µ ¬´{field_display_map[field]}¬ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=fill_data_keyboard
    )
    await state.clear()


# –î–æ–±–∞–≤–∏–º FSM‚Äë—Å—Ç–µ–π—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
class DeleteStates(StatesGroup):
    confirm = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def delete_data_handler(message: Message, state: FSMContext):
    # –°—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(DeleteStates.confirm)

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞—ë–º ReplyKeyboardMarkup –∏ KeyboardButton —Å –∫–ª—é—á–µ–≤—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:
    confirm_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ?\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ ¬´–î–∞¬ª, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ.",
        reply_markup=confirm_kb
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
@dp.message(StateFilter(DeleteStates.confirm))
async def process_delete_confirmation(message: Message, state: FSMContext):
    text = message.text.strip().lower()

    if text == "–¥–∞":
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session() as session:
            async with session.begin():
                await session.execute(
                    delete(UserData)
                    .where(UserData.telegram_id == message.from_user.id)
                )
            await session.commit()

        await message.answer("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", reply_markup=main_keyboard)

    else:
        await message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=fill_data_keyboard)

    await state.clear()


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    await message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=main_keyboard)

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
