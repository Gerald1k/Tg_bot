from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, 
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    CallbackQuery
)
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import os
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")],
        [KeyboardButton(text="üçΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ö–ë–ñ–£")],
        [KeyboardButton(text="üß™ –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑")],
        [KeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")],
        [KeyboardButton(text="üíä –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π")],
        [KeyboardButton(text="ü©ª –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–º–µ–Ω—é "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
fill_data_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üñä –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
class DataStates(StatesGroup):
    fio = State()
    goal = State()
    sport = State()
    smoking = State()
    alcohol = State()
    chronic = State()
    heredity = State()
    clinical = State()

# /start
@dp.message(CommandStart())
async def start_handler(message: Message):
    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {username}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ –≤–∞—à—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–∞—Ä—Ç—É.\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∞–Ω–∞–ª–∏–∑–∞–º–∏, –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. "
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_keyboard
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
@dp.message(F.text == "üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
async def fill_data_handler(message: Message):
    await message.answer(
        "üîí –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:",
        reply_markup=fill_data_keyboard
    )

# –ù–∞—á–∞–ª–æ FSM: –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
@dp.message(F.text == "üñä –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")
async def enter_data_handler(message: Message, state: FSMContext):
    await state.set_state(DataStates.fio)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
@dp.message(StateFilter(DataStates.fio))
async def process_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã", callback_data="goal:–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã")],
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",       callback_data="goal:–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã")],
        [InlineKeyboardButton(text="–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞",           callback_data="goal:–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞")],
    ])
    await state.set_state(DataStates.goal)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
@dp.callback_query(StateFilter(DataStates.goal), F.data.startswith("goal:"))
async def process_goal_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    goal = query.data.split(":", 1)[1]
    await state.update_data(goal=goal)
    await state.set_state(DataStates.sport)
    await query.message.edit_reply_markup()  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await query.message.answer("–ó–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –ª–∏ –≤—ã –∫–∞–∫–∏–º-–ª–∏–±–æ —Å–ø–æ—Ä—Ç–æ–º? –ï—Å–ª–∏ –¥–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∏–¥ –∏ —á–∞—Å—Ç–æ—Ç—É –∑–∞–Ω—è—Ç–∏–π:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Ä—Ç–∞
@dp.message(StateFilter(DataStates.sport))
async def process_sport(message: Message, state: FSMContext):
    await state.update_data(sport=message.text)
    # inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫—É—Ä–µ–Ω–∏—è
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞",  callback_data="smoking:–î–∞")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="smoking:–ù–µ—Ç")],
    ])
    await state.set_state(DataStates.smoking)
    await message.answer("–ö—É—Ä–∏—Ç–µ –ª–∏ –≤—ã?", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ –∫—É—Ä–µ–Ω–∏—é
@dp.callback_query(StateFilter(DataStates.smoking), F.data.startswith("smoking:"))
async def process_smoking_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    smoking = query.data.split(":", 1)[1]
    await state.update_data(smoking=smoking)
    # inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–ª–∫–æ–≥–æ–ª—è
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞",  callback_data="alcohol:–î–∞")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="alcohol:–ù–µ—Ç")],
    ])
    await state.set_state(DataStates.alcohol)
    await query.message.edit_reply_markup()
    await query.message.answer("–£–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –ª–∏ –≤—ã –∞–ª–∫–æ–≥–æ–ª—å?", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ –∞–ª–∫–æ–≥–æ–ª—é
@dp.callback_query(StateFilter(DataStates.alcohol), F.data.startswith("alcohol:"))
async def process_alcohol_cb(query: CallbackQuery, state: FSMContext):
    await query.answer()
    alcohol = query.data.split(":", 1)[1]
    await state.update_data(alcohol=alcohol)
    await query.message.edit_reply_markup()
    # –î–∞–ª–µ–µ —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥
    await state.set_state(DataStates.chronic)
    await query.message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏? –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –±–æ–ª–µ–∑–Ω–µ–π
@dp.message(StateFilter(DataStates.chronic))
async def process_chronic(message: Message, state: FSMContext):
    await state.update_data(chronic=message.text)
    await state.set_state(DataStates.heredity)
    await message.answer("–ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å (–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
@dp.message(StateFilter(DataStates.heredity))
async def process_heredity(message: Message, state: FSMContext):
    await state.update_data(heredity=message.text)
    await state.set_state(DataStates.clinical)
    await message.answer("–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è (—Å–∏–º–ø—Ç–æ–º—ã, –∂–∞–ª–æ–±—ã):")

# –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
@dp.message(StateFilter(DataStates.clinical))
async def process_clinical(message: Message, state: FSMContext):
    await state.update_data(clinical=message.text)
    data = await state.get_data()
    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    summary = (
        f"<b>–í–æ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"üë§ –§–ò–û: {data['fio']}\n"
        f"üéØ –¶–µ–ª—å: {data['goal']}\n"
        f"üèÖ –°–ø–æ—Ä—Ç: {data['sport']}\n"
        f"üö¨ –ö—É—Ä–µ–Ω–∏–µ: {data['smoking']}\n"
        f"üç∑ –ê–ª–∫–æ–≥–æ–ª—å: {data['alcohol']}\n"
        f"üíâ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏: {data['chronic']}\n"
        f"üß¨ –ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å: {data['heredity']}\n"
        f"ü©∫ –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è: {data['clinical']}\n"
        f"üë§ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç: {username}\n"
    )
    await message.answer(summary, reply_markup=main_keyboard)
    await state.clear()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def edit_data_handler(message: Message):
    await message.answer("‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.")

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def delete_data_handler(message: Message):
    await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –ù–∞–ø–∏—à–∏—Ç–µ '–î–∞', —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ.")

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    await message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=main_keyboard)

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
