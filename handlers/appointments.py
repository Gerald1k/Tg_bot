from aiogram import Router, F, types
from aiogram.types import(
    Message,
    CallbackQuery
    )
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from datetime import datetime

from keyboards.main_menu import InlineKeyboardButton, InlineKeyboardMarkup, doctor_keyboard
from states.appointment_states import AppointmentFlow, EditAppointmentState
from db import DoctorAppointment, async_session


router = Router() 

@router.message(F.text == "üíä –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π")
async def analyses_menu_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤—Ä–∞—á–µ–π:", reply_markup=doctor_keyboard)

# --------------- –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ -----------------
# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –≤–≤–æ–¥–∞
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ")
async def start_appointments(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏—ë–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(AppointmentFlow.date)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
@router.message(AppointmentFlow.date)
async def process_date(message: Message, state: FSMContext):
    try:
        appt_date = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.MM.–ì–ì–ì–ì:")
        return

    await state.update_data(appointment_date=appt_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞:")
    await state.set_state(AppointmentFlow.doctor)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–∞—á–∞
@router.message(AppointmentFlow.doctor)
async def process_doctor(message: Message, state: FSMContext):
    await state.update_data(doctor=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞:")
    await state.set_state(AppointmentFlow.recommendation)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
@router.message(AppointmentFlow.recommendation)
async def process_recommendation(message: Message, state: FSMContext):
    data = await state.get_data()
    appt = DoctorAppointment(
        telegram_id=message.from_user.id,
        appointment_date=data["appointment_date"],
        doctor=data["doctor"],
        recommendation=message.text.strip()
    )
    async with async_session() as session:
        async with session.begin():
            session.add(appt)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚ûï –ï—â—ë –æ—Ç —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞", callback_data="appt_add_same"),
        InlineKeyboardButton(text="üë©‚Äç‚öïÔ∏è –î—Ä—É–≥–æ–π –≤—Ä–∞—á", callback_data="appt_add_new"),
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="appt_finish"),
    ]])
    await message.answer("–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb)
    await state.set_state(AppointmentFlow.next_action)

# –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –æ—Ç —Ç–æ–≥–æ –∂–µ –≤—Ä–∞—á–∞
@router.callback_query(AppointmentFlow.next_action, F.data == "appt_add_same")
async def add_more_same(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(None)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –µ—â—ë –æ–¥–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞:")
    await state.set_state(AppointmentFlow.recommendation)
    await callback.answer()

# –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –¥—Ä—É–≥–æ–≥–æ –≤—Ä–∞—á–∞
@router.callback_query(AppointmentFlow.next_action, F.data == "appt_add_new")
async def add_new_doctor(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(None)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –∏–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–∞—á–∞:")
    await state.set_state(AppointmentFlow.doctor)
    await callback.answer()

# –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
@router.callback_query(AppointmentFlow.next_action, F.data == "appt_finish")
async def finish_appointments(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(None)
    await callback.message.answer("‚úÖ –í—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await state.clear()
    await callback.answer()
    
# --------------- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ -----------------
@router.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
async def view_doctor_appointments(message: types.Message):
    telegram_id = message.from_user.id

    async with async_session() as session:
        result = await session.execute(
            select(DoctorAppointment.doctor).where(DoctorAppointment.telegram_id == telegram_id)
        )
        doctors = list(set(row[0] for row in result.fetchall()))

    if not doctors:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=doc, callback_data=f"view_appt_{doc}")]
            for doc in doctors
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=keyboard)
    
@router.callback_query(F.data.startswith("view_appt_"))
async def show_appointments_by_doctor(callback: types.CallbackQuery):
    telegram_id = callback.from_user.id
    doctor = callback.data.removeprefix("view_appt_")

    async with async_session() as session:
        result = await session.execute(
            select(DoctorAppointment).where(
                DoctorAppointment.telegram_id == telegram_id,
                DoctorAppointment.doctor == doctor
            ).order_by(DoctorAppointment.appointment_date.desc())
        )
        appointments = result.scalars().all()

    if not appointments:
        await callback.message.answer("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    text = f"üìã –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –≤—Ä–∞—á–∞: <b>{doctor}</b>\n\n"
    for appt in appointments:
        date = appt.appointment_date.strftime("%d.%m.%Y")
        text += f"üóì <b>{date}</b>\nüìù {appt.recommendation}\n\n"

    await callback.message.answer(text)
    await callback.answer()

# --------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ -----------------

@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
async def choose_doctor_to_edit(callback: types.Message):
    telegram_id = callback.from_user.id

    async with async_session() as session:
        result = await session.execute(
            select(DoctorAppointment.doctor).where(DoctorAppointment.telegram_id == telegram_id)
        )
        doctors = list(set(row[0] for row in result.fetchall()))

    if not doctors:
        await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=doc, callback_data=f"edit_doc_{doc}")]
            for doc in doctors
        ]
    )
    await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_doc_"))
async def choose_appointment_to_edit(callback: types.CallbackQuery):
    telegram_id = callback.from_user.id
    doctor = callback.data.removeprefix("edit_doc_")

    async with async_session() as session:
        result = await session.execute(
            select(DoctorAppointment).where(
                DoctorAppointment.telegram_id == telegram_id,
                DoctorAppointment.doctor == doctor
            ).order_by(DoctorAppointment.appointment_date.desc())
        )
        appointments = result.scalars().all()

    if not appointments:
        await callback.message.edit_text("–£ —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{appt.appointment_date.strftime('%d.%m.%Y')} {appt.recommendation[:25]}{'...' if len(appt.recommendation) > 25 else ''}",
                callback_data=f"edit_appt_{appt.id}"
            )]
            for appt in appointments
        ]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_appt_"))
async def ask_for_new_text(callback: types.CallbackQuery, state: FSMContext):
    appt_id = int(callback.data.removeprefix("edit_appt_"))
    await state.update_data(appt_id=appt_id)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    cancel_button = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[cancel_button]])

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(EditAppointmentState.waiting_for_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@router.message(EditAppointmentState.waiting_for_text)
async def save_edited_text(message: types.Message, state: FSMContext):
    new_text = message.text
    data = await state.get_data()
    appt_id = data['appt_id']

    async with async_session() as session:
        result = await session.execute(select(DoctorAppointment).where(DoctorAppointment.id == appt_id))
        appt = result.scalar_one_or_none()

        if not appt:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return

        appt.recommendation = new_text
        await session.commit()

    await message.answer("–¢–µ–∫—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data == "cancel_edit")
async def cancel_edit(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    
# --------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ -----------------

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–£–¥–∞–ª–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
async def choose_doctor_to_delete(callback: types.Message):
    telegram_id = callback.from_user.id

    async with async_session() as session:
        result = await session.execute(
            select(DoctorAppointment.doctor).where(DoctorAppointment.telegram_id == telegram_id)
        )
        doctors = list(set(row[0] for row in result.fetchall()))  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ä–∞—á–∏

    if not doctors:
        await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=doc, callback_data=f"delete_doc_{doc}")]
            for doc in doctors
        ]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")])

    await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("delete_doc_"))
async def choose_appointment_to_delete(callback: types.CallbackQuery):
    telegram_id = callback.from_user.id
    doctor = callback.data.removeprefix("delete_doc_")

    async with async_session() as session:
        result = await session.execute(
            select(DoctorAppointment).where(
                DoctorAppointment.telegram_id == telegram_id,
                DoctorAppointment.doctor == doctor
            ).order_by(DoctorAppointment.appointment_date.desc())
        )
        appointments = result.scalars().all()

    if not appointments:
        await callback.message.edit_text("–£ —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{appt.appointment_date.strftime('%d.%m.%Y')} {appt.recommendation[:25]}{'...' if len(appt.recommendation) > 25 else ''}",
                callback_data=f"delete_appt_{appt.id}"
            )]
            for appt in appointments
        ]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º append
    cancel_button = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
    keyboard.inline_keyboard.append([cancel_button])  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ append

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("delete_appt_"))
async def confirm_delete_appointment(callback: types.CallbackQuery, state: FSMContext):
    appt_id = int(callback.data.removeprefix("delete_appt_"))
    await state.update_data(appt_id=appt_id)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    confirm_button = InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_delete_yes")
    cancel_button = InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[confirm_button, cancel_button]])

    await callback.message.edit_text("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "confirm_delete_yes")
async def delete_appointment(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    appt_id = data['appt_id']

    async with async_session() as session:
        result = await session.execute(select(DoctorAppointment).where(DoctorAppointment.id == appt_id))
        appt = result.scalar_one_or_none()

        if not appt:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return

        # –£–¥–∞–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        await session.delete(appt)
        await session.commit()

    await callback.message.edit_text("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()