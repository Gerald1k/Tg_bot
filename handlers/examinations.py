from aiogram import Router, F, types
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile
)
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from datetime import datetime
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import StateFilter
from aiogram.filters.command import Command
import os

from keyboards.main_menu import InlineKeyboardButton, InlineKeyboardMarkup, examination_keyboard
from states.examination_states import EditExamStates 
from db import  async_session, InstrumentalExamination


router = Router() 

UPLOAD_DIR = "uploaded_files"  # –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(UPLOAD_DIR):
    os.makedirs(UPLOAD_DIR)

async def save_examination_file(message: Message):
    try:
        if not message.document:
            return None

        file_info = await message.bot.get_file(message.document.file_id)
        file_name = message.document.file_name

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        file_path = get_unique_file_path(UPLOAD_DIR, file_name)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await message.bot.download(message.document.file_id, destination=file_path)

        return file_path

    except TelegramAPIError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None
    
def get_unique_file_path(upload_dir: str, original_name: str) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Ç–∞–∫–æ–π —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å"""
    base, extension = os.path.splitext(original_name)
    counter = 1
    new_name = original_name

    while os.path.exists(os.path.join(upload_dir, new_name)):
        new_name = f"{base}_{counter}{extension}"
        counter += 1

    return os.path.join(upload_dir, new_name)

@router.message(F.text == "ü©ª –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
async def examinations_menu_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏:", reply_markup=examination_keyboard)

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
async def add_examination(message: types.Message, state: FSMContext):
    await message.answer("ü©ª –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:")
    await state.set_state("examination_name")

@router.message(StateFilter("examination_name"))
async def get_examination_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state("examination_date")

@router.message(StateFilter("examination_date"))
async def get_examination_date(message: types.Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return

    await state.update_data(date=date)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:")
    await state.set_state("examination_description")

@router.message(StateFilter("examination_description"))
async def get_examination_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (–¥–æ 50 –ú–ë) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω—É–∂–µ–Ω:")
    await state.set_state("examination_file")

@router.message(StateFilter("examination_file"), F.document)
async def get_examination_file(message: types.Message, state: FSMContext):
    file = message.document

    if file.file_size > 50 * 1024 * 1024:
        await message.answer("‚ùó –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 50 –ú–ë.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å
    file_path = await save_examination_file(message)

    await state.update_data(file=file_path)
    await save_examination(message, state)

@router.message(StateFilter("examination_file"), Command("skip"))
async def skip_examination_file(message: types.Message, state: FSMContext):
    await state.update_data(file=None)
    await save_examination(message, state)

async def save_examination(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    new_exam = InstrumentalExamination(
        telegram_id=message.from_user.id,
        name=data["name"],
        examination_date=data["date"],
        description=data["description"],
        file_path=data.get("file"),  # file_path —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        created_at=datetime.utcnow()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        session.add(new_exam)
        await session.commit()

    await message.answer("‚úÖ –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    await state.clear()
# --------------- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è -----------------

# 1) –°–ø–∏—Å–æ–∫ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
@router.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
async def view_examinations(message: types.Message):
    async with async_session() as session:
        result = await session.execute(
            select(InstrumentalExamination.id, InstrumentalExamination.name)
            .where(InstrumentalExamination.telegram_id == message.from_user.id)
            .distinct()
        )

        exams = result.all()  # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (id, name)

    if not exams:
        await message.answer("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.")
        return

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏—Ç –≤ callback_data –µ–≥–æ ID
    rows = [
        [
            InlineKeyboardButton(
                text=name,
                callback_data=f"view_examination:{exam_id}"
            )
        ]
        for exam_id, name in exams
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)


# 2) –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("view_examination:"))
async def view_examination_details(callback_query: types.CallbackQuery):
    exam_id = int(callback_query.data.split(":", 1)[1])

    async with async_session() as session:
        result = await session.execute(
            select(InstrumentalExamination)
            .where(
                InstrumentalExamination.id == exam_id,
                InstrumentalExamination.telegram_id == callback_query.from_user.id
            )
)
        exam = result.scalar_one_or_none()

    if not exam:
        await callback_query.answer("‚ùó –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    date_str = exam.examination_date.strftime("%d.%m.%Y")
    desc = exam.description or ""
    short_desc = (desc[:150] + "...") if len(desc) > 150 else desc

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = []
    if exam.file_path:
        buttons.append(
            InlineKeyboardButton(
                text="üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                callback_data=f"download:{exam_id}"
            )
        )
    buttons.append(
        InlineKeyboardButton(
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            callback_data="cancel"
        )
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[buttons])
    text = (
        f"üîç <b>{exam.name}</b>\n"
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {short_desc}"
    )
    await callback_query.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await callback_query.answer()  # –∑–∞–∫—Ä—ã—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª


# 3) –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
@router.callback_query(F.data.startswith("download:"))
async def download_file(callback_query: types.CallbackQuery):
    exam_id = int(callback_query.data.split(":", 1)[1])

    async with async_session() as session:
        result = await session.execute(
            select(InstrumentalExamination.file_path).filter_by(id=exam_id)
        )
        file_path = result.scalar_one_or_none()

    if not file_path:
        await callback_query.answer("‚ùó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", show_alert=True)
        return

    await callback_query.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")

    try:
        document = FSInputFile(path=file_path)
        await callback_query.message.answer_document(document)
    except FileNotFoundError:
        await callback_query.message.answer("‚ùó –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    except Exception:
        await callback_query.message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª.")


# 4) –û—Ç–º–µ–Ω–∞/–∑–∞–∫—Ä—ã—Ç—å
@router.callback_query(F.data == "cancel")
async def cancel(callback_query: types.CallbackQuery):
    await callback_query.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=False)
# --------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ -----------------


# 1) –ó–∞–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
async def edit_examination_start(message: types.Message):
    user_id = message.from_user.id
    async with async_session() as session:
        result = await session.execute(
            select(InstrumentalExamination.id, InstrumentalExamination.name)
            .filter_by(telegram_id=user_id)
            .order_by(InstrumentalExamination.examination_date.desc())
        )
        exams = result.all()

    if not exams:
        return await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

    rows = [
        [InlineKeyboardButton(text=name, callback_data=f"edit_examination:{exam_id}")]
        for exam_id, name in exams
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)

# 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
@router.callback_query(F.data.startswith("edit_examination:"))
async def edit_examination_select(callback: types.CallbackQuery, state: FSMContext):
    exam_id = int(callback.data.split(":", 1)[1])
    async with async_session() as session:
        exam = await session.get(InstrumentalExamination, exam_id)
    if not exam or exam.telegram_id != callback.from_user.id:
        await callback.answer("‚ùó –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await state.update_data(
        exam_id=exam_id,
        old_description=exam.description or "",
        old_file_path=exam.file_path
    )

    text = (
        f"üìù –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n"
        f"{exam.description or '(–ø—É—Å—Ç–æ)'}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
    )
    await callback.message.answer(text)
    await state.set_state(EditExamStates.desc)
    await callback.answer()

# 3) –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ /skip
@router.message(F.text, StateFilter(EditExamStates.desc))
async def edit_examination_desc(message: types.Message, state: FSMContext):
    if message.text.strip() == "/skip":
        await state.update_data(new_description=None)
    else:
        await state.update_data(new_description=message.text.strip())

    await message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π.")
    await state.set_state(EditExamStates.file)

# 4a) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª
@router.message(StateFilter(EditExamStates.file), F.document)
async def edit_examination_file(message: types.Message, state: FSMContext):
    data = await state.get_data()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    new_path = await save_examination_file(message)
    await state.update_data(new_file_path=new_path)
    await _commit_edit(message, state)

# 4b) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–º–µ–Ω—É —Ñ–∞–π–ª–∞
@router.message(StateFilter(EditExamStates.file), F.text == "/skip")
async def edit_examination_file_skip(message: types.Message, state: FSMContext):
    await state.update_data(new_file_path=None)
    await _commit_edit(message, state)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def _commit_edit(message: types.Message, state: FSMContext):
    data = await state.get_data()
    exam_id       = data["exam_id"]
    new_desc      = data.get("new_description")
    new_file      = data.get("new_file_path")
    old_file      = data.get("old_file_path")

    async with async_session() as session:
        exam = await session.get(InstrumentalExamination, exam_id)

        if new_desc is not None:
            exam.description = new_desc

        if new_file is not None:
            # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
            if old_file and os.path.exists(old_file):
                try:
                    os.remove(old_file)
                except OSError:
                    pass
            exam.file_path = new_file

        await session.commit()

    await message.answer("‚úÖ –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()
# --------------- –£–¥–∞–ª–∏—Ç—å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ -----------------
# 1) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
async def delete_examination_start(message: types.Message):
    user_id = message.from_user.id
    async with async_session() as session:
        result = await session.execute(
            select(InstrumentalExamination.id, InstrumentalExamination.name)
            .filter_by(telegram_id=user_id)
            .order_by(InstrumentalExamination.examination_date.desc())
        )
        exams = result.all()

    if not exams:
        return await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    rows = [
        [InlineKeyboardButton(text=name, callback_data=f"choose_examination_to_delete:{exam_id}")]
        for exam_id, name in exams
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=kb)


# 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("choose_examination_to_delete:"))
async def confirm_delete_examination(callback_query: types.CallbackQuery):
    exam_id = int(callback_query.data.split(":")[1])

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{exam_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
        ]
    ])

    await callback_query.message.answer("‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ?", reply_markup=kb)
    await callback_query.answer()


# 3) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("confirm_delete:"))
async def delete_examination(callback_query: types.CallbackQuery):
    exam_id = int(callback_query.data.split(":")[1])

    async with async_session() as session:
        exam = await session.get(InstrumentalExamination, exam_id)
        if not exam or exam.telegram_id != callback_query.from_user.id:
            await callback_query.answer("‚ùó –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
            return

        file_path = exam.file_path

        await session.delete(exam)
        await session.commit()

    if file_path and os.path.exists(file_path):
        try:
            os.remove(file_path)
        except OSError:
            pass

    await callback_query.message.answer("‚úÖ –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    await callback_query.answer()


# 4) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ
@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback_query: types.CallbackQuery):
    await callback_query.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.answer()