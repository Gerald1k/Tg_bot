from aiogram import Router, F
from keyboards.main_menu import InlineKeyboardButton, InlineKeyboardMarkup, analysis_keyboard
from aiogram.types import(
    Message,
    FSInputFile,
    CallbackQuery
    )
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, delete, desc, func
from datetime import datetime, date, timedelta
import dateparser
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
import re
import tempfile
from io import BytesIO
import os

from states.analysis_states import AddAnalysis, DeleteFlow
from db import async_session, AnalyzesMem, Analysis
router = Router() 


@router.message(F.text == "üß™ –ê–Ω–∞–ª–∏–∑—ã")
async def analyses_menu_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏:", reply_markup=analysis_keyboard)



@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
async def start_add_analysis(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ (–¥–¥.–º–º.–≥–≥–≥–≥, '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞'):"
    )
    await state.set_state(AddAnalysis.date)


@router.message(AddAnalysis.date)
async def process_date(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    try:
        if text in ['—Å–µ–≥–æ–¥–Ω—è', 'today']:
            parsed_date = date.today()
        elif text in ['–≤—á–µ—Ä–∞', 'yesterday']:
            parsed_date = date.today() - timedelta(days=1)
        else:
            dt = dateparser.parse(text, languages=['ru', 'en'])
            if not dt:
                raise ValueError
            parsed_date = dt.date()

        await state.update_data(date=parsed_date)

        async with async_session() as session:
            q = select(AnalyzesMem.group_name).distinct()
            res = await session.execute(q)
            groups = [r[0] for r in res.all()]

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=g, callback_data=f"group|{g}")] for g in groups
            ] + [[InlineKeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥", callback_data="finish")]]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=kb)
        await state.set_state(AddAnalysis.select_group)
    except Exception:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥, '—Å–µ–≥–æ–¥–Ω—è' –∏–ª–∏ '–≤—á–µ—Ä–∞'."
        )


@router.callback_query(F.data.startswith('group|'), AddAnalysis.select_group)
async def choose_group(callback: CallbackQuery, state: FSMContext):
    group = callback.data.split("|", 1)[1]
    await state.update_data(group=group)

    async with async_session() as session:
        q = select(AnalyzesMem.name).where(AnalyzesMem.group_name == group).distinct()
        res = await session.execute(q)
        names = [r[0] for r in res.all()]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=n, callback_data=f"analysis|{n}")] for n in names
        ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="back_to_groups")]]
    )
    await callback.message.answer(f"–ì—Ä—É–ø–ø–∞: {group}. –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:", reply_markup=kb)
    await state.set_state(AddAnalysis.select_analysis)
    await callback.answer()


@router.callback_query(F.data == 'back_to_groups', AddAnalysis.select_analysis)
async def back_to_groups(callback: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        q = select(AnalyzesMem.group_name).distinct()
        res = await session.execute(q)
        groups = [r[0] for r in res.all()]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=g, callback_data=f"group|{g}")] for g in groups
        ] + [[InlineKeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥", callback_data="finish")]]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=kb)
    await state.set_state(AddAnalysis.select_group)
    await callback.answer()


@router.callback_query(F.data.startswith('analysis|'), AddAnalysis.select_analysis)
async def choose_analysis(callback: CallbackQuery, state: FSMContext):
    name = callback.data.split("|", 1)[1]
    data = await state.get_data()
    group = data.get("group")

    async with async_session() as session:
        q = select(AnalyzesMem).where(
            AnalyzesMem.group_name == group,
            AnalyzesMem.name == name
        )
        res = await session.execute(q)
        variants = res.scalars().all()

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{v.unit} ({v.reference_values})", callback_data=f"variant|{v.id}")] for v in variants
        ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑–∞–º", callback_data="back_to_analyses")]]
    )
    await callback.message.answer(f"–ê–Ω–∞–ª–∏–∑: {name}. –í—ã–±–µ—Ä–∏—Ç–µ –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(AddAnalysis.select_variant)
    await callback.answer()


@router.callback_query(F.data == 'back_to_analyses', AddAnalysis.select_variant)
async def back_to_analyses(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    group = data.get("group")

    async with async_session() as session:
        q = select(AnalyzesMem.name).where(AnalyzesMem.group_name == group).distinct()
        res = await session.execute(q)
        names = [r[0] for r in res.all()]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=n, callback_data=f"analysis|{n}")] for n in names
        ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="back_to_groups")]]
    )
    await callback.message.answer(f"–ì—Ä—É–ø–ø–∞: {group}. –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:", reply_markup=kb)
    await state.set_state(AddAnalysis.select_analysis)
    await callback.answer()


@router.callback_query(F.data.startswith('variant|'), AddAnalysis.select_variant)
async def choose_variant(callback: CallbackQuery, state: FSMContext):
    mem_id = int(callback.data.split("|", 1)[1])
    async with async_session() as session:
        mem = await session.get(AnalyzesMem, mem_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await state.update_data(
        mem_id=mem_id,
        name=mem.name,
        # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É
        conversion_to_standard=mem.conversion_to_standard,
        # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏ –µ—ë —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        standard_unit=mem.standard_unit,
        standard_reference=mem.standard_reference
    )

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {mem.name} ‚Äî {mem.unit} ({mem.reference_values}).\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞(–Ω–∞–ø—Ä–∏–º–µ—Ä 5.6):"
    )
    await state.set_state(AddAnalysis.result)
    await callback.answer()


@router.message(AddAnalysis.result)
async def process_result(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        raw_val = float(message.text.strip())

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Å–æ—Ç—ã—Ö
        standardized_val = round(raw_val * data['conversion_to_standard'], 2)

        async with async_session() as session:
            async with session.begin():
                new = Analysis(
                    telegram_id=message.from_user.id,
                    name=data['name'],
                    group_name=data['group'],
                    units=data['standard_unit'],
                    reference=data['standard_reference'],
                    result=str(standardized_val),
                    date=data['date']
                )
                session.add(new)

        # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞
        async with async_session() as session:
            q = select(AnalyzesMem.group_name).distinct()
            res = await session.execute(q)
            groups = [r[0] for r in res.all()]

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=g, callback_data=f"group|{g}")]
                for g in groups
            ] + [[InlineKeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥", callback_data="finish")]]
        )
        await message.answer(
            f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {data['name']} = {standardized_val} {data['standard_unit']}.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç–µ:",
            reply_markup=kb
        )
        await state.set_state(AddAnalysis.select_group)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—â—ë —Ä–∞–∑.")

@router.callback_query(F.data == "finish", AddAnalysis.select_group)
async def finish_adding(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–æ–¥ –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=analysis_keyboard)
    await state.clear()
    await callback.answer()

# --------------- –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏–∑–æ–≤ -----------------

pdfmetrics.registerFont(
    TTFont('ArialUnicode', r'C:\Windows\Fonts\arial.ttf')
)

@router.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏–∑—ã")
async def show_analysis_menu(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—Å–µ –∞–Ω–∞–ª–∏–∑—ã", callback_data="view_option|all")],
        [InlineKeyboardButton(text="–ü–æ –¥–∞—Ç–µ —Å–¥–∞—á–∏", callback_data="view_option|date")],
        [InlineKeyboardButton(text="–î–∏–Ω–∞–º–∏–∫–∞", callback_data="view_option|trend")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_view")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤:", reply_markup=kb)

# 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
@router.callback_query(F.data.startswith("view_option|"))
async def handle_view_option(callback: CallbackQuery):
    option = callback.data.split("|", 1)[1]
    # –û–ø—Ü–∏—è "–í—Å–µ –∞–Ω–∞–ª–∏–∑—ã"
    if option == "all":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ–º", callback_data="all_msg")],
            [InlineKeyboardButton(text="PDF", callback_data="all_pdf")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_menu")]
        ])
        await callback.message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã?", reply_markup=kb)

    # –û–ø—Ü–∏—è "–ü–æ –¥–∞—Ç–µ —Å–¥–∞—á–∏"
    elif option == "date":
        async with async_session() as session:
            q = select(Analysis.date).where(
                Analysis.telegram_id == callback.from_user.id
            ).distinct().order_by(desc(Analysis.date))
            res = await session.execute(q)
            dates = [r[0] for r in res.all()]
        if not dates:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
        else:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=d.strftime("%d.%m.%Y"), callback_data=f"view_date|{d.isoformat()}")]
                    for d in dates
                ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_menu")]]
            )
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏:", reply_markup=kb)

    # –û–ø—Ü–∏—è "–î–∏–Ω–∞–º–∏–∫–∞"
    elif option == "trend":
        # –í—ã–≤–æ–¥–∏–º –≥—Ä—É–ø–ø—ã –∞–Ω–∞–ª–∏–∑–æ–≤, –∫–∞–∫ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        async with async_session() as session:
            q = select(Analysis.group_name).where(
                Analysis.telegram_id == callback.from_user.id
            ).distinct()
            res = await session.execute(q)
            groups = [r[0] for r in res.all()]
        if not groups:
            await callback.message.answer("üìã –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
        else:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=g, callback_data=f"view_group|{g}")]
                    for g in groups
                ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_view")]]
            )
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=kb
            )
    await callback.answer()

# 3. –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
@router.callback_query(F.data == "all_msg")
async def all_msg(callback: CallbackQuery):
    async with async_session() as session:
        subq = select(
            Analysis.name,
            func.max(Analysis.date).label("max_date")
        ).where(
            Analysis.telegram_id == callback.from_user.id
        ).group_by(Analysis.name).subquery()
        q = select(
            Analysis.name,
            Analysis.result,
            Analysis.reference,
            Analysis.date
        ).join(
            subq,
            (Analysis.name == subq.c.name) & (Analysis.date == subq.c.max_date)
        )
        res = await session.execute(q)
        rows = res.all()

    if not rows:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
        await callback.answer()
        return

    text = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º –∞–Ω–∞–ª–∏–∑–∞–º:</b>\n"
    for name, result, reference, date in rows:
        # –ø—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª—É (—É—á—ë—Ç 4,5 –∏ 4.5)
        res_num = None
        if result:
            try:
                res_num = float(result.replace(',', '.'))
            except ValueError:
                pass

        # –ø–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω reference
        min_ref = max_ref = None
        if reference:
            parts = re.split(r'[^0-9\.]+', reference)
            nums = [p.replace(',', '.') for p in parts if p]
            if len(nums) >= 2:
                try:
                    min_ref, max_ref = float(nums[0]), float(nums[1])
                except ValueError:
                    pass

        # –≤—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        if res_num is not None and min_ref is not None and max_ref is not None:
            emoji = 'üü¢' if min_ref <= res_num <= max_ref else 'üî¥'
        else:
            emoji = ''

        text += f"{emoji}{name} = {result} ({date.strftime('%d.%m.%Y')})\n"

    await callback.message.answer(text)
    await callback.answer()

# 4. –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ PDF (–¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
@router.callback_query(F.data == "all_pdf")
async def all_pdf(callback: CallbackQuery):
    # --- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ ---
    async with async_session() as session:
        q = (
            select(Analysis)
            .where(Analysis.telegram_id == callback.from_user.id)
            .order_by(Analysis.name, desc(Analysis.date))
        )
        res = await session.execute(q)
        analyses = res.scalars().all()

    # --- –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ---
    grouped = {}
    for a in analyses:
        grouped.setdefault(a.name, []).append(a)

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å—Ç–∏–ª–µ–π ---
    data = [[
        '–ê–Ω–∞–ª–∏–∑', '–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–∞—Ç–∞)',
        '–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–∞—Ç–∞)', '–†–µ—Ñ–µ—Ä–µ–Ω—Å', '–ï–¥. –∏–∑–º.'
    ]]
    styles = [
        ('FONTNAME',   (0,0), (-1,-1), 'ArialUnicode'),
        ('GRID',       (0,0), (-1,-1), 0.5, colors.black),
        ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
    ]

    # –®–∞–±–ª–æ–Ω –¥–ª—è Paragraph
    stylesheet = getSampleStyleSheet()
    body = stylesheet['BodyText']
    body.fontName = 'ArialUnicode'
    body.fontSize = 10

    row = 1
    for name, items in grouped.items():
        last = items[0]
        prev = items[1] if len(items) > 1 else None

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫—Ä–∞—à–µ–Ω–Ω–æ–≥–æ Paragraph
        def make_para(item):
            txt = item.result
            date_str = item.date.strftime('%d.%m.%Y')
            color = None
            try:
                val = float(item.result.replace(',', '.'))
                parts = re.split(r'[^0-9,\.]+', item.reference or '')
                nums = [p.replace(',', '.') for p in parts if p]
                if len(nums) >= 2:
                    lo, hi = map(float, nums[:2])
                    color = 'green' if lo <= val <= hi else 'red'
            except:
                pass

            if color:
                # —Ü–≤–µ—Ç–∏–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –¥–∞—Ç—É –æ—Å—Ç–∞–≤–ª—è–µ–º —á—ë—Ä–Ω–æ–π
                return Paragraph(
                    f'<font name="ArialUnicode">'
                    f'<font color="{color}">{txt}</font> '
                    f'({date_str})'
                    f'</font>',
                    body
                )
            else:
                return Paragraph(f'{txt} ({date_str})', body)

        last_para = make_para(last)
        prev_para = make_para(prev) if prev else Paragraph('‚Äî', body)

        data.append([
            Paragraph(name, body),
            last_para,
            prev_para,
            Paragraph(last.reference or '‚Äî', body),
            Paragraph(last.units or '‚Äî', body),
        ])
        row += 1

    # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF ---
    buf = BytesIO()
    doc = SimpleDocTemplate(buf, pagesize=A4)
    tbl = Table(
        data,
        colWidths=[80, 150, 150, 70, 60],  # 80 –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ "–ï–¥. –∏–∑–º."
        repeatRows=1
    )
    tbl.setStyle(TableStyle(styles))
    doc.build([tbl])
    buf.seek(0)

    # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tf:
        tf.write(buf.read())
        path = tf.name

    await callback.message.answer_document(FSInputFile(path, filename='all_analyses.pdf'))
    await callback.answer()
    os.remove(path)

# 5. –í—ã–≤–æ–¥ –ø–æ –¥–∞—Ç–µ
@router.callback_query(F.data.startswith("view_date|"))
async def view_date(callback: CallbackQuery):
    iso = callback.data.split("|", 1)[1]
    date = datetime.fromisoformat(iso).date()
    async with async_session() as session:
        q = select(Analysis.name, Analysis.result, Analysis.reference).where(
            Analysis.telegram_id == callback.from_user.id,
            Analysis.date == date
        )
        res = await session.execute(q)
        rows = res.all()

    if not rows:
        await callback.message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
    else:
        text = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ {date.strftime('%d.%m.%Y')}:</b>\n"
        for name, result, reference in rows:
            # –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ —á–∏—Å–ª—É (—É—á—ë—Ç 4,5 –∏ 4.5)
            res_num = None
            if result:
                try:
                    res_num = float(result.replace(',', '.'))
                except ValueError:
                    pass

            # –ø–∞—Ä—Å–∏–º –≥—Ä–∞–Ω–∏—Ü—ã —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            min_ref = max_ref = None
            if reference:
                parts = re.split(r'[^0-9,\.]+', reference)
                nums = [p.replace(',', '.') for p in parts if p]
                if len(nums) >= 2:
                    try:
                        min_ref, max_ref = float(nums[0]), float(nums[1])
                    except ValueError:
                        pass

            # –≤—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
            if res_num is not None and min_ref is not None and max_ref is not None:
                emoji = 'üü¢' if min_ref <= res_num <= max_ref else 'üî¥'
            else:
                emoji = ''

            text += f"{name} = {emoji}{result} ({reference})\n"
        await callback.message.answer(text)
        await callback.answer()

# 6. –ì—Ä—É–ø–ø—ã –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–¥–∏–Ω–∞–º–∏–∫–∞) ‚Äî —Ç–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
@router.callback_query(F.data.startswith("view_group|"))
async def view_group(callback: CallbackQuery):
    group = callback.data.split("|", 1)[1]
    async with async_session() as session:
        q = select(Analysis.name).where(
            Analysis.telegram_id == callback.from_user.id,
            Analysis.group_name == group
        ).distinct()
        res = await session.execute(q)
        names = [r[0] for r in res.all()]

    if not names:
        await callback.message.answer(
            "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=None
        )
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=n, callback_data=f"view_analysis|{n}")]
                for n in names
            ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_view")]]
        )
        await callback.message.answer(
            f"–ì—Ä—É–ø–ø–∞: {group}. –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:",
            reply_markup=kb
        )
    await callback.answer()

@router.callback_query(F.data.startswith("view_analysis|"))
async def view_analysis(callback: CallbackQuery):
    name = callback.data.split("|", 1)[1]
    async with async_session() as session:
        q = select(Analysis).where(
            Analysis.telegram_id == callback.from_user.id,
            Analysis.name == name
        ).order_by(desc(Analysis.date))
        res = await session.execute(q)
        analyses = res.scalars().all()

    if not analyses:
        await callback.message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        )
    else:
        text = f"<b>–ê–Ω–∞–ª–∏–∑—ã {name}:</b>\n\n"
        for a in analyses:
            dt = a.date.strftime("%d.%m.%Y") if a.date else '‚Äî'
            res_num = None
            if a.result:
                try:
                    res_num = float(a.result.replace(',', '.'))
                except ValueError:
                    pass

            # –ø–∞—Ä—Å–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –Ω–æ—Ä–º—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ reference, –Ω–∞–ø—Ä–∏–º–µ—Ä "60-80"
            min_ref = max_ref = None
            if a.reference:
                parts = re.split(r'[^0-9,\.]+', a.reference)
                nums = [p.replace(',', '.') for p in parts if p]
                if len(nums) >= 2:
                    try:
                        min_ref, max_ref = float(nums[0]), float(nums[1])
                    except ValueError:
                        pass

            # –≤—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏: üü¢ –µ—Å–ª–∏ –≤ –Ω–æ—Ä–º–µ, üî¥ –µ—Å–ª–∏ –≤–Ω–µ
            if res_num is not None and min_ref is not None and max_ref is not None:
                emoji = 'üü¢' if min_ref <= res_num <= max_ref else 'üî¥'
            else:
                emoji = ''

            text += (
                f"üìÖ {dt}: {emoji}{a.result or '‚Äî'} {a.units or ''} "
                f"(–†–µ—Ñ–µ—Ä–µ–Ω—Å: {a.reference or '‚Äî'})\n"
            )
        await callback.message.answer(text)
    await callback.answer()

# 7. –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
@router.callback_query(F.data == "cancel_view" or F.data == "show_menu")
async def cancel_view(callback: CallbackQuery):
    await callback.message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏–∑–æ–≤ –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback.answer()
    
# --------------- –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–æ–≤ -----------------
@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
async def start_delete_analysis(message: Message, state: FSMContext):
    # –®–∞–≥ 1: —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    async with async_session() as session:
        res = await session.execute(
            select(Analysis.group_name)
            .where(Analysis.telegram_id == message.from_user.id)
            .distinct()
        )
        groups = [r[0] for r in res.all()]

    if not groups:
        await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=g, callback_data=f"del_group|{g}")]
            for g in groups
        ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="del_cancel")]]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(DeleteFlow.waiting_for_group)

# –û—Ç–º–µ–Ω–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ –ø–æ—Ç–æ–∫–∞
@router.callback_query(DeleteFlow.waiting_for_group, F.data == "del_cancel")
async def cancel_delete_group(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

@router.callback_query(DeleteFlow.waiting_for_group, F.data.startswith("del_group|"))
async def choose_delete_group(callback: CallbackQuery, state: FSMContext):
    group = callback.data.split("|", 1)[1]
    await state.update_data(group=group)

    # –®–∞–≥ 2: —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
    async with async_session() as session:
        res = await session.execute(
            select(Analysis.name)
            .where(
                Analysis.telegram_id == callback.from_user.id,
                Analysis.group_name == group
            )
            .distinct()
        )
        names = [r[0] for r in res.all()]

    if not names:
        await callback.message.edit_text("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤.")
        await state.clear()
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=n, callback_data=f"del_name|{n}")]
            for n in names
        ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="del_back")]]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=kb)
    await state.set_state(DeleteFlow.waiting_for_name)
    await callback.answer()

# ¬´–ù–∞–∑–∞–¥¬ª –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
@router.callback_query(DeleteFlow.waiting_for_name, F.data == "del_back")
async def back_to_group(callback: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        res = await session.execute(
            select(Analysis.group_name)
            .where(Analysis.telegram_id == callback.from_user.id)
            .distinct()
        )
        groups = [r[0] for r in res.all()]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=g, callback_data=f"del_group|{g}")]
            for g in groups
        ] + [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="del_cancel")]]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(DeleteFlow.waiting_for_group)
    await callback.answer()

@router.callback_query(DeleteFlow.waiting_for_name, F.data.startswith("del_name|"))
async def choose_delete_name(callback: CallbackQuery, state: FSMContext):
    name = callback.data.split("|", 1)[1]
    await state.update_data(name=name)

    # –®–∞–≥ 3: —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    async with async_session() as session:
        res = await session.execute(
            select(Analysis)
            .where(
                Analysis.telegram_id == callback.from_user.id,
                Analysis.name == name
            )
            .order_by(desc(Analysis.date))
        )
        analyses = res.scalars().all()

    if not analyses:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
        await state.clear()
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{a.date.strftime('%d.%m.%Y')}: {a.result or '‚Äî'} {a.units or ''}",
                callback_data=f"del_select|{a.id}"
            )]
            for a in analyses
        ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="del_back")]]
    )
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ ¬´{name}¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=kb
    )
    await state.set_state(DeleteFlow.waiting_for_analysis)
    await callback.answer()

# ¬´–ù–∞–∑–∞–¥¬ª –∫ –≤—ã–±–æ—Ä—É –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
@router.callback_query(DeleteFlow.waiting_for_analysis, F.data == "del_back")
async def back_to_name(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    group = data.get("group")
    async with async_session() as session:
        res = await session.execute(
            select(Analysis.name)
            .where(
                Analysis.telegram_id == callback.from_user.id,
                Analysis.group_name == group
            )
            .distinct()
        )
        names = [r[0] for r in res.all()]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=n, callback_data=f"del_name|{n}")]
            for n in names
        ] + [[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="del_back")]]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=kb)
    await state.set_state(DeleteFlow.waiting_for_name)
    await callback.answer()

@router.callback_query(DeleteFlow.waiting_for_analysis, F.data.startswith("del_select|"))
async def confirm_delete(callback: CallbackQuery, state: FSMContext):
    analysis_id = int(callback.data.split("|", 1)[1])
    async with async_session() as session:
        analysis = await session.get(Analysis, analysis_id)

    if not analysis:
        await callback.message.edit_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    await state.update_data(analysis_id=analysis_id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[  
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"del_confirm|{analysis_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="del_cancel")
        ]]
    )
    await callback.message.edit_text(
        f"–£–¥–∞–ª–∏—Ç—å –∞–Ω–∞–ª–∏–∑ ¬´{analysis.name}¬ª –æ—Ç {analysis.date.strftime('%d.%m.%Y')}?",
        reply_markup=kb
    )
    await state.set_state(DeleteFlow.confirm_delete)
    await callback.answer()

@router.callback_query(DeleteFlow.confirm_delete, F.data.startswith("del_confirm|"))
async def process_delete_confirm(callback: CallbackQuery, state: FSMContext):
    analysis_id = int(callback.data.split("|", 1)[1])
    async with async_session() as session:
        async with session.begin():
            await session.execute(delete(Analysis).where(Analysis.id == analysis_id))

    await callback.message.edit_text("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    await state.clear()
    await callback.answer()