from aiogram import Router, F
from keyboards.main_menu import main_keyboard
from aiogram.types import(
    Message
    )
from sqlalchemy import select, delete

from db import async_session, UserData
router = Router() 

def calculate_kbju(weight, goal):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏."""
    proteins = weight * 1.5
    fats = weight - 10
    if goal == "–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã":
        carbs = weight * 4
        carbs2 = weight * 3
        calories = proteins * 4 + fats * 9 + carbs * 4
        calories2 = proteins * 4 + fats * 9 + carbs2 * 4
        expected_change = (calories - calories2) * 30 / 7.9
        change_text = f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –≤ –º–µ—Å—è—Ü: {int(expected_change)} –≥"
    elif goal == "–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞":
        carbs = weight * 1.5
        carbs2 = weight * 3
        calories = proteins * 4 + fats * 9 + carbs * 4
        calories2 = proteins * 4 + fats * 9 + carbs2 * 4
        expected_change = abs(calories - calories2) * 30 / 7.9
        change_text = f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –ø–æ—Ç–µ—Ä—è –≤ –º–µ—Å—è—Ü: {int(expected_change)} –≥"
    else:  # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã
        carbs = weight * 3
        calories = proteins * 4 + fats * 9 + carbs * 4
        change_text = "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–∞—Å—Å–µ –Ω–µ—Ç"
    
    return proteins, fats, carbs, calories, change_text


@router.message(F.text == "üçΩ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ö–ë–ñ–£")
async def kbju_recommendation(message: Message):
    # –î–æ—Å—Ç–∞—ë–º –∏–∑ –ë–î –≤–µ—Å –∏ —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as session:
        async with session.begin():
            result = await session.execute(
                select(UserData).where(UserData.telegram_id == message.from_user.id)
            )
            user = result.scalars().first()

    if not user:
        await message.answer(
            "‚ùóÔ∏è –î–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=main_keyboard
        )
        return

    try:
        weight = float(user.weight)
    except (TypeError, ValueError):
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Å–∞ –≤ –±–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Üí –í–µ—Å.",
            reply_markup=main_keyboard
        )
        return

    goal = user.goal

    # –†–∞—Å—á—ë—Ç –ö–ë–ñ–£
    proteins, fats, carbs, calories, change_text = calculate_kbju(weight, goal)

    # –°–æ–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üèãÔ∏è‚Äç‚ôÇÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ö–ë–ñ–£</b>\n\n"
        f"üìè –í–∞—à –≤–µ—Å: {weight:.1f} –∫–≥\n"
        f"üéØ –¶–µ–ª—å: {goal}\n\n"
        f"ü•© –ë–µ–ª–∫–∏: {int(proteins)} –≥\n"
        f"üßà –ñ–∏—Ä—ã: {int(fats)} –≥\n"
        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {int(carbs)} –≥\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {int(calories)} –∫–∫–∞–ª\n\n"
        f"üîÑ {change_text}"
    )
    await message.answer(text, reply_markup=main_keyboard)